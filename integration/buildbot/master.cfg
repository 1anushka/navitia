# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a username and password.  The same username and
# password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("local-slave", "foobar"), BuildSlave("win-slave", "foobar")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

repo_url = "https://ctp-gesconf.canaltp.fr/svn/NAViTiACpp/trunk"
svn_user = "<USER>"
svn_passwd = "<PASSWORD>"



from buildbot.changes.svnpoller import SVNPoller
c['change_source'] = SVNPoller(
        repo_url,
        svnuser=svn_user, svnpasswd=svn_passwd)

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.scheduler import Scheduler
c['schedulers'] = []
c['schedulers'].append(Scheduler(name="all", branch=None,
                                 treeStableTimer=None,
                                 builderNames=["runtests-linux", "runtests-win"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import SVN
from buildbot.steps.shell import ShellCommand

factory = BuildFactory()
# check out the source
factory.addStep(SVN(svnurl=repo_url, mode='copy', username=svn_user, password=svn_passwd))
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(ShellCommand(command=["cmake", "source"]))
factory.addStep(ShellCommand(command=["make"]))
factory.addStep(ShellCommand(command=["make", "test"]))

from buildbot.steps.vstudio import VS2010
factoryWin = BuildFactory()
# check out the source
factoryWin.addStep(SVN(svnurl=repo_url, mode='copy', username=svn_user, password=svn_passwd))
factoryWin.addStep(ShellCommand(command=["cmake", "-Wdev", " -G \"Visual Studio 10\"", "source"]))
factoryWin.addStep(VS2010(projectfile="navitiacpp.sln", config="Release"))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="runtests-linux",
      slavenames=["local-slave"],
      factory=factory))

c['builders'].append(
    BuilderConfig(name="runtests-win",
      slavenames=["win-slave"],
      factory=factoryWin))
####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import auth, authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status.mail import MailNotifier
mn = MailNotifier(fromaddr="buildbot@canaltp.lan", sendToInterestedUsers=False,
                       extraRecipients=["alexandre.jacquin.externe@canaltp.fr"], mode="problem")
c['status'].append(mn)


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "navitiacpp"
c['projectURL'] = ""

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

