<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Tests de non régression navitia" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1362741736000</longProp>
        <longProp name="ThreadGroup.end_time">1362741736000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">8088</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Stop Points" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/stop_points.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;PTREFERENTIAL&quot;){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(!resp.stop_points){
AssertionResult.setFailureMessage(&quot;On a pas d&apos;attribu stop_points&quot;) ;
AssertionResult.setFailure(true);
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Stop Points with depth" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="depth" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">depth</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/stop_points.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;PTREFERENTIAL&quot;){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

for(var i = 0; i &lt; resp.stop_points.length; i++){
  var stop_point = resp.stop_points[i];
  if(stop_point.stop_area){
AssertionResult.setFailureMessage(&quot;Un stop_point a un stop_area alors que le depth=0, uri du coupable : &quot;  + stop_point.uri) ;
AssertionResult.setFailure(true);
  }
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Stop Points avec Filter" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="filter" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">stop_area.uri=stop_area:COMM</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">filter</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/stop_points.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;PTREFERENTIAL&quot;){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

for(var i = 0; i &lt; resp.stop_points.length; i++){
  var stop_point = resp.stop_points[i];
  if(stop_point.stop_area.uri != &apos;stop_area:COMM&apos;){
AssertionResult.setFailureMessage(&quot;Un stop_point a un stop_area qui n&apos;aurait pas du apparaitre &quot; + stop_point.stop_area.uri + &quot; uri du stop_point :&quot; + stop_point.uri) ;
AssertionResult.setFailure(true);
  }
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Metadatas" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/metadatas.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;METADATAS&quot;){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}
</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Places" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">gare</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/places.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;places&quot;){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.places.length &lt;= 0){
AssertionResult.setFailureMessage(&quot;On a trouvé aucun élément dans autocomplete&quot;) ;
AssertionResult.setFailure(true);
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Places with type" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="q" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">gare</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">q</stringProp>
              </elementProp>
              <elementProp name="type[]" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">stop_area</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">type[]</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/places.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;places&quot;){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

for(var i = 0; i &lt; resp.places.length; i++ ){
var item = resp.places[i];
if(!item.stop_area){
AssertionResult.setFailureMessage(&quot;On a trouvé un élément qui n&apos;est pas un stop area, uri : &quot; + item.uri) ;
AssertionResult.setFailure(true);
  }
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Isochrone" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="origin" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">stop_area:ABDU</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">origin</stringProp>
              </elementProp>
              <elementProp name="datetime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">20121002T08000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">datetime</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/isochrone.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;ISOCHRONE&quot;){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.isochrone.items.length &lt;= 0){
AssertionResult.setFailureMessage(&quot;On a aucune solution&quot;) ;
AssertionResult.setFailure(true);
}

var previous_duration = 0;
for(var i = 0;  i &lt; resp.isochrone.items.length; i++){
var item = resp.isochrone.items[i];
if(item.duration &lt; previous_duration){
AssertionResult.setFailureMessage(&quot;Les horaires ne sont pas croissants, ex : &quot; + item.uri) ;
AssertionResult.setFailure(true);
}

if(item.duration  &gt; 3600){
AssertionResult.setFailureMessage(&quot;Les horaires font leurs maurice et dépassent les bornes &quot; + item.uri) ;
AssertionResult.setFailure(true);
}

}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Isochrone with coordinates" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="origin" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">coord:-1.60337553:47.2201966</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">origin</stringProp>
              </elementProp>
              <elementProp name="datetime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">20121002T08000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">datetime</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/isochrone.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;ISOCHRONE&quot;){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.isochrone.items.length &lt;= 0){
AssertionResult.setFailureMessage(&quot;On a aucune solution&quot;) ;
AssertionResult.setFailure(true);
}

var previous_duration = 0;
for(var i = 0;  i &lt; resp.isochrone.items.length; i++){
var item = resp.isochrone.items[i];
if(item.duration &lt; previous_duration){
AssertionResult.setFailureMessage(&quot;Les horaires ne sont pas croissants, ex : &quot; + item.uri) ;
AssertionResult.setFailure(true);
}

if(item.duration  &gt; 3600){
AssertionResult.setFailureMessage(&quot;Les horaires font leurs maurice et dépassent les bornes &quot; + item.uri) ;
AssertionResult.setFailure(true);
}

}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="404 request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/blablablabla.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="51512">404</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Find &quot;Unknown api&quot;" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1008982748">Unknown api</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Places nearby" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="uri" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">coord:-1.57309458:47.20704484</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">uri</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/places_nearby.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;places_nearby&quot;){
AssertionResult.setFailureMessage(&quot;Variable requested_type != places_nearby&quot;) ;
AssertionResult.setFailure(true);
}

if(!resp.places_nearby){
AssertionResult.setFailureMessage(&quot;Pas de variable places_nearby&quot;) ;
AssertionResult.setFailure(true);
}

var previous_dist = 0;
for(var i = 0; i &lt; resp.places_nearby.length; i++){
var item = resp.places_nearby[i];
if(item.distance &gt; 1000){
AssertionResult.setFailureMessage(&quot;Distance trop grande : &quot; + item.distance + &quot; uri : &quot; + item.uri) ;
AssertionResult.setFailure(true);
}
if(item.distance &lt; previous_dist){
AssertionResult.setFailureMessage(&quot;Les données ne sont pas croissantes, exemple d&apos;élément décroissant &quot; + item.uri) ;
AssertionResult.setFailure(true);
}
previous_dist = item.distance;
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Places nearby with no region" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="uri" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">coord:-1.57309458:47.20704484</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">uri</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/places_nearby.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;places_nearby&quot;){
AssertionResult.setFailureMessage(&quot;Variable requested_type != places_nearby&quot;) ;
AssertionResult.setFailure(true);
}

if(!resp.places_nearby){
AssertionResult.setFailureMessage(&quot;Pas de variable places_nearby&quot;) ;
AssertionResult.setFailure(true);
}

var previous_dist = 0;
for(var i = 0; i &lt; resp.places_nearby.length; i++){
var item = resp.places_nearby[i];
if(item.distance &gt; 1000){
AssertionResult.setFailureMessage(&quot;Distance trop grande : &quot; + item.distance + &quot; uri : &quot; + item.uri) ;
AssertionResult.setFailure(true);
}
if(item.distance &lt; previous_dist){
AssertionResult.setFailureMessage(&quot;Les données ne sont pas croissantes, exemple d&apos;élément décroissant &quot; + item.uri) ;
AssertionResult.setFailure(true);
}
previous_dist = item.distance;
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Places nearby with radius" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="distance" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">200</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">distance</stringProp>
              </elementProp>
              <elementProp name="uri" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">coord:-1.57309458:47.20704484</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">uri</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/places_nearby.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;places_nearby&quot;){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(!resp.places_nearby){
AssertionResult.setFailureMessage(&quot;Pas de variable places_nearby&quot;) ;
AssertionResult.setFailure(true);
}

var previous_dist = 0;
for(var i = 0; i &lt; resp.places_nearby.length; i++){
var item = resp.places_nearby[i];
if(item.distance &gt; 200){
AssertionResult.setFailureMessage(&quot;Distance trop grande : &quot; + item.distance + &quot; uri : &quot; + item.uri) ;
AssertionResult.setFailure(true);
}
if(item.distance &lt; previous_dist){
AssertionResult.setFailureMessage(&quot;Les données ne sont pas croissantes, exemple d&apos;élément décroissant &quot; + item.uri) ;
AssertionResult.setFailure(true);
}
previous_dist = item.distance;
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Places nearby with type" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="type[]" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">stop_point</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">type[]</stringProp>
              </elementProp>
              <elementProp name="uri" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">coord:-1.57309458:47.20704484</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">uri</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/places_nearby.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;places_nearby&quot;){
AssertionResult.setFailureMessage(&quot;Variable requested_type != places_nearby&quot;) ;
AssertionResult.setFailure(true);
}

if(!resp.places_nearby){
AssertionResult.setFailureMessage(&quot;Pas de variable proximitylist&quot;) ;
AssertionResult.setFailure(true);
}


var previous_dist = 0;
for(var i = 0; i &lt; resp.places_nearby.length; i++){
var item = resp.places_nearby[i];
if(!item.stop_point){
AssertionResult.setFailureMessage(&quot;Type non demandé : &quot;  + item.uri) ;
AssertionResult.setFailure(true);
}
if(item.distance &lt; previous_dist){
AssertionResult.setFailureMessage(&quot;Les données ne sont pas croissantes, exemple d&apos;élément décroissant &quot; + item.uri) ;
AssertionResult.setFailure(true);
}
previous_dist = item.distance;
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Regions" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/regions.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;REGIONS&quot;){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.regions[0].status != &quot;running&quot;){
AssertionResult.setFailureMessage(&quot;Region pas marquée comme running&quot;) ;
AssertionResult.setFailure(true);
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Journeys" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="origin" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">stop_area:ABDU</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">origin</stringProp>
              </elementProp>
              <elementProp name="datetime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">20121002T08000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">datetime</stringProp>
              </elementProp>
              <elementProp name="destination" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">stop_area:COMM</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">destination</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/journeys.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;PLANNER&quot;){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.planner.response_type != &apos;ITINERARY_FOUND&apos;){
AssertionResult.setFailureMessage(&quot;On a pas le bon response_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.planner.journeys.length &lt;= 0){
AssertionResult.setFailureMessage(&quot;On a aucune solution&quot;) ;
AssertionResult.setFailure(true);
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Journeys with coordinates" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="origin" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">coord:-1.60337553:47.2201966</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">origin</stringProp>
              </elementProp>
              <elementProp name="datetime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">20121002T08000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">datetime</stringProp>
              </elementProp>
              <elementProp name="destination" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">coord:-1.55633177:47.21345774</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">destination</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/journeys.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;PLANNER&quot;){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.planner.response_type != &apos;ITINERARY_FOUND&apos;){
AssertionResult.setFailureMessage(&quot;On a pas le bon response_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.planner.journeys.length &lt;= 0){
AssertionResult.setFailureMessage(&quot;On a aucune solution&quot;) ;
AssertionResult.setFailure(true);
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Networks" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/networks.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;PTREFERENTIAL&quot;){
AssertionResult.setFailureMessage(&quot;On a pas le bon requested_api : &quot; + resp.requested_api) ;
AssertionResult.setFailure(true);
}

if(!resp.networks){
AssertionResult.setFailureMessage(&quot;On a pas d&apos;attribut networks&quot;) ;
AssertionResult.setFailure(true);
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Vehicle Journeys" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="depth" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">depth</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/vehicle_journeys.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;PTREFERENTIAL&quot;){
AssertionResult.setFailureMessage(&quot;On a pas le bon requested_api : &quot; + resp.requested_api) ;
AssertionResult.setFailure(true);
}

if(!resp.vehicle_journeys){
AssertionResult.setFailureMessage(&quot;On a pas d&apos;attribut vehicle_journeys&quot;) ;
AssertionResult.setFailure(true);
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Connections" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/connections.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;PTREFERENTIAL&quot;){
AssertionResult.setFailureMessage(&quot;On a pas le bon requested_api : &quot; + resp.requested_api) ;
AssertionResult.setFailure(true);
}

if(!resp.connections){
AssertionResult.setFailureMessage(&quot;On a pas d&apos;attribut connections&quot;) ;
AssertionResult.setFailure(true);
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Commercial Modes" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/commercial_modes.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;PTREFERENTIAL&quot;){
AssertionResult.setFailureMessage(&quot;On a pas le bon requested_api : &quot; + resp.requested_api) ;
AssertionResult.setFailure(true);
}

if(!resp.commercial_modes){
AssertionResult.setFailureMessage(&quot;On a pas d&apos;attribut commercial modes&quot;) ;
AssertionResult.setFailure(true);
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Physical Modes" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/physical_modes.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;PTREFERENTIAL&quot;){
AssertionResult.setFailureMessage(&quot;On a pas le bon requested_api : &quot; + resp.requested_api) ;
AssertionResult.setFailure(true);
}

if(!resp.physical_modes){
AssertionResult.setFailureMessage(&quot;On a pas d&apos;attribut physical modes&quot;) ;
AssertionResult.setFailure(true);
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Companies" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/companies.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;PTREFERENTIAL&quot;){
AssertionResult.setFailureMessage(&quot;On a pas le bon requested_api : &quot; + resp.requested_api) ;
AssertionResult.setFailure(true);
}
</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Stop Areas" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/stop_areas.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;PTREFERENTIAL&quot;){
AssertionResult.setFailureMessage(&quot;On a pas le bon requested_api : &quot; + resp.requested_api) ;
AssertionResult.setFailure(true);
}

if(!resp.ptref.stop_areas){
AssertionResult.setFailureMessage(&quot;On a pas d&apos;attribut stop_areas&quot;) ;
AssertionResult.setFailure(true);
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Routes" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/routes.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;PTREFERENTIAL&quot;){
AssertionResult.setFailureMessage(&quot;On a pas le bon requested_api : &quot; + resp.requested_api) ;
AssertionResult.setFailure(true);
}

if(!resp.routes){
AssertionResult.setFailureMessage(&quot;On a pas d&apos;attribut routes&quot;) ;
AssertionResult.setFailure(true);
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Lines" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/lines.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;PTREFERENTIAL&quot;){
AssertionResult.setFailureMessage(&quot;On a pas le bon requested_api : &quot; + resp.requested_api) ;
AssertionResult.setFailure(true);
}

if(!resp.lines){
AssertionResult.setFailureMessage(&quot;On a pas d&apos;attribut lines&quot;) ;
AssertionResult.setFailure(true);
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Metadatas" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v0/moo/metadatas.json</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Headers Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2066544187">Content-Type: application/json</stringProp>
              <stringProp name="1477249802">200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="JSON Tests" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// On met le résultat dans une variable resp
eval(&apos;var resp = &apos; + prev.getResponseDataAsString());
if(!resp.requested_api){
AssertionResult.setFailureMessage(&quot;Pas de variable requested_type&quot;) ;
AssertionResult.setFailure(true);
}

if(resp.requested_api != &quot;METADATAS&quot;){
AssertionResult.setFailureMessage(&quot;On a pas le bon requested_api : &quot; + resp.requested_api) ;
AssertionResult.setFailure(true);
}

if(!resp.metadatas){
AssertionResult.setFailureMessage(&quot;On a pas d&apos;attribut metadatas&quot;) ;
AssertionResult.setFailure(true);
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
