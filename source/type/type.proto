package pbnavitia;

enum NavitiaType {
    LINE = 1;
    JOURNEY_PATTERN = 2;
    STOP_POINT = 4;
    STOP_AREA = 5;
    NETWORK = 7;
    PHYSICAL_MODE = 8;
    COMMERCIAL_MODE = 9;
    CITY = 10;
    CONNECTION = 11;
    JOURNEY_PATTERN_POINT = 12;
    VEHICLE_JOURNEY = 13;
    COMPANY = 15;
    COUNTRY = 17;
    ADDRESS = 22;
    ROUTE = 23;
    POI = 24;
    POITYPE = 25;
    ADMIN = 26;
}


enum API {
    places = 1;
    PTREFERENTIAL = 2;
    PLANNER = 4;
    LOAD = 5;
    places_nearby = 6;
    STATUS = 7;
    NEXT_DEPARTURES = 8;
    NEXT_ARRIVALS = 9;
    DEPARTURE_BOARDS = 10;
    ROUTE_SCHEDULES = 11;
    STOPS_SCHEDULES = 12;
    ISOCHRONE = 13;
    METADATAS = 14;
}

enum VehicleJourneyType{
    regular = 0;                 // ligne régulière
    virtual_with_stop_time = 1;       // TAD virtuel avec horaires
    virtual_without_stop_time = 2;    // TAD virtuel sans horaires
    stop_point_to_stop_point = 3;     // TAD rabattement arrêt à arrêt
    adress_to_stop_point = 4;         // TAD rabattement adresse à arrêt
    odt_point_to_point = 5;           // TAD point à point (Commune à Commune)
    
    
    //regular = 0;
    //odt_with_stop_time = 1;
    //odt_with_zone = 2;
}

message Message{
    optional string uri = 1;
    optional string message = 2;
    optional string title = 3;
}

message GeographicalCoord {
    required double lon = 1;
    required double lat = 2;
}


message AdministrativeRegion {
    optional string uri = 2;
    optional string name  = 3;
    optional string zip_code = 4;
    optional int32 level = 5;
    optional GeographicalCoord coord = 6;
}

message StopArea {
    optional string name = 3;
    optional string uri = 4;
    optional GeographicalCoord coord = 5;
    repeated AdministrativeRegion administrative_regions = 10;
    repeated StopPoint stop_points = 8;
    repeated Message messages = 9;
}

message StopPoint {
    optional string name = 3;
    repeated AdministrativeRegion administrative_regions = 10;
    optional string uri = 5;
    optional GeographicalCoord coord = 6;
    optional StopArea stop_area = 7;
    optional hasEquipments has_equipments = 8;

    repeated Message messages = 9;
}

message Line {
    optional string name = 3;
    optional string uri = 4;
    optional string code = 5;
    optional string color = 9;
    repeated Route routes = 10;
    optional CommercialMode commercial_mode = 11;
    repeated PhysicalMode physical_mode = 12;
    optional Network network = 13;

    repeated Message messages = 14;
}

message Route {
    optional string name = 3;
    optional string uri = 4;
    optional bool is_frequence = 5;
    optional Line line = 7;
    repeated JourneyPattern journey_patterns = 8;
    repeated Message messages = 9;
}

message JourneyPattern {
    optional string name = 3;
    optional string uri = 4;
    optional bool is_frequence = 5;
    optional PhysicalMode physical_mode = 6;
    optional Route route = 7;

    repeated JourneyPatternPoint journey_pattern_points = 8;

    repeated Message messages = 9;
}

message Note{
    required string uri = 1;
    optional string note = 2;	
}

message hasPropertie{
	enum AdditionalInformation{
		PICK_UP_ONLY = 1;
		DROP_OFF_ONLY = 2;
		ON_DEMAND_TRANSPORT = 3;
		DATE_TIME_ESTIMATED = 4;
	}
	repeated AdditionalInformation additional_informations= 1;
	repeated Note notes = 5;
}

message hasEquipments{
	enum Equipment{
        has_wheelchair_accessiblity = 1;
        has_bike_accepted = 2;
        has_air_conditioned = 3;
        has_visual_announcement = 4;
        has_audible_announcement = 5;
        has_appropriate_escort = 6;
        has_appropriate_signage = 7;
        has_school_vehicle = 8;        
        has_wheelchair_boarding = 8;
		has_sheltered = 9;
		has_elevator = 10;
		has_escalator = 11;
		has_bike_depot = 12;
	}
	repeated Equipment has_equipments = 1;
}

message StopDateTime {
    optional string arrival_date_time = 1;
    optional string departure_date_time = 2;    
    optional StopPoint stop_point = 3;
    optional hasPropertie has_properties = 4;
}


message StopTime {
    optional string arrival_time = 1;
    optional string departure_time = 3;
    optional VehicleJourney vehicle_journey = 4;
    optional JourneyPatternPoint journey_pattern_point = 5;
    optional bool pickup_allowed = 6;
    optional bool drop_off_allowed = 7;
}

message VehicleJourney {
    optional string name = 3;
    optional string uri = 4;
    repeated StopTime stop_times = 6;
    optional Route route = 7;
    optional JourneyPattern journey_pattern = 8;

    repeated Message messages = 10;

    optional bool is_adapted = 11;
    optional ValidityPattern validity_pattern = 12;
    optional ValidityPattern adapted_validity_pattern = 13;
    optional string odt_message = 14;
    optional VehicleJourneyType vehicle_journey_type = 15;

    optional bool wheelchair_accessible = 16;
    optional bool bike_accepted = 17;
    optional bool air_conditioned = 18;
    optional bool visual_announcement = 19;
    optional bool audible_announcement = 20;
    optional bool appropriate_escort = 21;
    optional bool appropriate_signage = 22;
    optional bool school_vehicle = 23;   
}

message JourneyPatternPoint{
    optional string uri = 3;
    optional int32 order = 4;
    optional StopPoint stop_point = 5;
    optional JourneyPattern journey_pattern = 6;

    repeated Message messages = 7;
}

message Contributor {
    optional string uri = 1;
    optional string name = 2;
}

message PoiType {
    optional string uri = 1;
    optional string name = 2;
}

message Poi {
    optional string uri = 3;
    optional string name = 4;
    optional GeographicalCoord coord = 6;
    optional PoiType poi_type = 7;
    repeated AdministrativeRegion administrative_regions = 10;
}

message Network {
    optional string uri = 3;
    optional string name = 4;
    repeated Line lines = 5;
}

message PhysicalMode {
    optional string uri = 3;
    optional string name = 4;
    repeated CommercialMode commercial_modes = 5;
}

message CommercialMode {
    optional string uri = 3;
    optional string name = 4;
    repeated PhysicalMode physical_modes = 5;
}

message Connection {
    optional StopPoint origin = 1;
    optional StopPoint destination = 2;
    optional int32 seconds = 3;
}

message Company {
    optional string uri = 3;
    optional string name = 4;
}

message Address {
    optional string uri = 3;
    optional string name = 4;
    optional GeographicalCoord coord = 6;
    repeated AdministrativeRegion administrative_regions = 10;
    optional int32 house_number = 2;
}


message ValidityPattern {
    optional string beginning_date = 1;
    optional string days = 2;
}

