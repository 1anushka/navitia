package pbnavitia;

enum NavitiaType {
    LINE = 1;
    JOURNEY_PATTERN = 2;
    STOP_POINT = 4;
    STOP_AREA = 5;
    NETWORK = 7;
    PHYSICAL_MODE = 8;
    COMMERCIAL_MODE = 9;
    CITY = 10;
    CONNECTION = 11;
    JOURNEY_PATTERN_POINT = 12;
    VEHICLE_JOURNEY = 13;
    COMPANY = 15;
    COUNTRY = 17;
    ADDRESS = 22;
    ROUTE = 23;
}


enum API {
    AUTOCOMPLETE = 1;
    PTREFERENTIAL = 2;
    PLANNER = 4;
    LOAD = 5;
    PROXIMITY_LIST = 6;
    STATUS = 7;
    NEXT_DEPARTURES = 8;
    NEXT_ARRIVALS = 9;
    DEPARTURE_BOARD = 10;
    LINE_SCHEDULE = 11;
    STOPS_SCHEDULE = 12;
    ISOCHRONE = 13;
    METADATAS = 14;
}

message Message{
    optional string uri = 1;
    optional string message = 2;
    optional string title = 3;
}

message GeographicalCoord {
    required double lon = 1;
    required double lat = 2;
}

message Country {
    optional string id = 1;
    optional string uri = 2;
    optional string name  = 3;
    optional GeographicalCoord coord = 6;
}

message StopArea {
    optional string name = 3;
    optional string uri = 4;
    optional GeographicalCoord coord = 5;
    optional City city = 6;
    repeated StopPoint stop_points = 8;
    repeated Message messages = 9;
}

message StopPoint {
    optional string name = 3;
    optional City city = 4;
    optional string uri = 5;
    optional GeographicalCoord coord = 6;
    optional StopArea stop_area = 7;

    repeated Message messages = 9;
}

message Line {
    optional string name = 3;
    optional string uri = 4;
    optional string code = 5;
    optional string color = 9;
    repeated Route routes = 10;

    repeated Message messages = 11;
}

message Route {
    optional string name = 3;
    optional string uri = 4;
    optional bool is_frequence = 5;
    optional Line line = 7;
    repeated JourneyPattern journey_patterns = 8;
}

message JourneyPattern {
    optional string name = 3;
    optional string uri = 4;
    optional bool is_frequence = 5;
    optional Route route = 7;
    repeated JourneyPatternPoint journey_pattern_points = 8;

    repeated Message messages = 9;
}

message StopDateTime {
    optional string arrival_date_time = 1;
    optional string departure_date_time = 2;
    optional StopPoint stop_point = 3;
}

message StopTime {
    optional string arrival_time = 1;
    optional string departure_time = 3;
    optional VehicleJourney vehicle_journey = 4;
    optional JourneyPatternPoint journey_pattern_point = 5;
    optional bool pickup_allowed = 6;
    optional bool drop_off_allowed = 7;
}


message VehicleJourney {
    optional string id = 1;
    optional string name = 3;
    optional string uri = 4;
    repeated StopTime stop_times = 6;
    optional Route route = 7;
    optional JourneyPattern journey_pattern = 8;
    optional PhysicalMode physical_mode = 9;

    repeated Message messages = 10;
}

message JourneyPatternPoint{
    optional string id = 1;
    optional string uri = 3;
    optional int32 order = 4;
    optional StopPoint stop_point = 5;
    optional JourneyPattern journey_pattern = 6;

    repeated Message messages = 7;
}

message City {
    optional string id = 1;
    optional string uri = 3;
    optional string zip_code = 2;
    optional string name = 4;
    optional GeographicalCoord coord = 6;
}

message Network {
    optional string id = 1;
    optional string uri = 3;
    optional string name = 4;
    repeated Line lines = 5;
}

message PhysicalMode {
    optional string id = 1;
    optional string uri = 3;
    optional string name = 4;
    repeated CommercialMode commercial_modes = 5;
}

message CommercialMode {
    optional string id = 1;
    optional string uri = 3;
    optional string name = 4;
    repeated PhysicalMode physical_modes = 5;
}

message Connection {
    optional StopPoint origin = 1;
    optional StopPoint destination = 2;
    optional int32 seconds = 3;
}

message Company {
    optional string id = 1;
    optional string uri = 3;
    optional string name = 4;
}

message Address {
    optional string id = 1;
    optional string uri = 3;
    optional string name = 4;
    optional GeographicalCoord coord = 6;
    optional City city = 7;
    optional int32 house_number = 2;
}

message District {
    optional string id = 1;
    optional string uri = 3;
    optional string name = 4;
}

message ValidityPattern {
}

message Department{
    optional string id = 1;
    optional string uri = 3;
    optional string name = 4;
}
